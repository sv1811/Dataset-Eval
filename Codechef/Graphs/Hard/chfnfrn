### Problem Explanation: Chef and Friends

Chef invited **N friends** to his birthday party, and he wants to organize them into two groups (tables) where everyone at each table knows each other. This is important because if people don't know each other, they might feel awkward while eating. Chef is wondering if it's possible to divide the friends into two such groups.

Your task is to figure out if it's possible to divide the friends into exactly two groups where:
- All the people in a group know each other.
- The groups do not mix with each other.

### Problem Details:

1. Chef has **N friends** and **M pairs** of friends that know each other.
2. You need to check if it’s possible to divide these friends into two groups such that every person in a group knows each other.
3. If it is possible to divide them, output "YES", otherwise output "NO".

### Input:

1. **T** test cases. For each test case:
   - The first line contains two integers: **N** (number of friends) and **M** (number of pairs of friends who know each other).
   - The next **M** lines contain two integers **ai** and **bi**, denoting that person **ai** and person **bi** know each other.
   
### Output:
For each test case, output "YES" if it's possible to divide the friends into two groups where everyone at each table knows each other, otherwise output "NO".

### Key Idea:
- We need to check if the graph of friends is **bipartite**. A graph is bipartite if you can divide its nodes (friends) into two sets, where each edge (friendship) connects nodes from different sets.
  
  - In simpler terms: if it's possible to split the friends into two groups, such that every friend in each group knows every other friend in that group, we can say the graph is bipartite.

### Constraints:
- The total number of friends (N) over all test cases does not exceed **10,000**.
- The total number of pairs of friends (M) over all test cases does not exceed **1,000,000**.
- You need to process each test case efficiently within the time limits.

### Example:

#### Input:
```
3
3 2
1 2
2 3
4 3
1 2
2 3
2 4
6 7
1 2
1 3
2 3
2 4
4 5
4 6
5 6
```

#### Output:
```
YES
NO
YES
```

### Explanation:

- **Test Case 1**: 
  - There are 3 friends and 2 pairs of friendships: (1, 2) and (2, 3).
  - It's possible to put person 1 at one table, and persons 2 and 3 at another table.
  - **Output**: "YES".

- **Test Case 2**: 
  - There are 4 friends and 3 pairs of friendships: (1, 2), (2, 3), and (2, 4).
  - These friendships create a scenario where it’s not possible to divide them into two groups where everyone in each group knows each other.
  - **Output**: "NO".

- **Test Case 3**: 
  - There are 6 friends and 7 pairs of friendships.
  - It's possible to divide them into two groups: {1, 2, 3} and {4, 5, 6}.
  - **Output**: "YES".

### Key Takeaway:
You need to check if the graph formed by the friendships is bipartite, which can be done using techniques like **DFS (Depth-First Search)** or **BFS (Breadth-First Search)** while coloring the graph in two colors. If it's possible to color the graph such that no two connected nodes have the same color, the graph is bipartite, and the answer is "YES". Otherwise, the answer is "NO".